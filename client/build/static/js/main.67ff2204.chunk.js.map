{"version":3,"sources":["logo.svg","axios.js","firebase.js","components/Navbar/Navbar.js","components/Button/Button.js","components/Modal/Modal.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","navbar","props","className","children","button","btnClass","color","disabled","modal","showModal","onClick","onCloseBtnClicked","title","type","onSaveBtnClicked","canSaveButton","input","labelElement","inputElement","styleLabel","styleLabelForCheckbox","req","inputtype","htmlFor","id","label","fileLabelSpan","filelabelspan","fileLabel","filelabel","spanText","data-multiple-caption","options","map","option","key","value","displayValue","Fragment","name","checked","selected","ischecked","App","state","data","newFileName","newComment","currentId","file_upload_name1","file_upload_name2","updateDatabase","console","log","ref","set","uploadFileHandler","ev","newData","Math","floor","random","updatedData","produce","draft","push","setState","handleKeyPress","closeModalHandler","sohwModalHandler","inputHandler","target","labelVal","nextElementSibling","innerHTML","fileName","files","length","getAttribute","replace","split","pop","span","inputBlurHandler","dataIndex","findIndex","val","comment","fileNameClickedHandler","get","then","res","dbLoaded","catch","err","this","commentHtml","bind","dataid","onChange","onBlur","rows","style","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67ff2204.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://my-first-activity.firebaseio.com/-LYQMvCCcIhXxVdiPSvW'\r\n});\r\n\r\nexport default instance;","import * as firebase from \"firebase\";\r\n\r\n  // Initialize Firebase\r\n  var config = {\r\n      apiKey: \"AIzaSyBMNjWQ2WDynf58aa8Opmgd8_T5hV5cGFU\",\r\n      authDomain: \"my-first-activity.firebaseapp.com\",\r\n      databaseURL: \"https://my-first-activity.firebaseio.com\",\r\n      projectId: \"my-first-activity\",\r\n      storageBucket: \"my-first-activity.appspot.com\",\r\n      messagingSenderId: \"494408684295\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\n    const database = firebase.database();\r\n\r\nexport {database};","import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst navbar = (props) =>{\r\n    return (\r\n        <div className = 'Navbar'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default navbar;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst button = (props) =>{\r\n    let btnClass = '';\r\n\r\n    if(props.color === 'primary'){\r\n        btnClass = 'btn btn-primary';\r\n    }\r\n    else if(props.color === 'danger'){\r\n        btnClass = 'btn danger';\r\n    }\r\n    else{\r\n        btnClass = 'btn';\r\n    }\r\n\r\n    return (\r\n        <div className = 'Button'>\r\n            <button disabled={props.disabled} className={btnClass} {...props}>{props.children}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default button;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nimport Button from '../Button/Button';\r\n\r\nconst modal = (props) =>{\r\n    \r\n    if(!props.showModal){\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"Modal\">\r\n            <div className=\"container\">\r\n                <span onClick={props.onCloseBtnClicked} className='close'>&times;</span>\r\n                <div className=\"header\">\r\n                    {props.title}\r\n                </div>\r\n\r\n                <div className=\"body\">\r\n                    {props.children}\r\n                </div>\r\n\r\n                <div className=\"footer\">\r\n                    <Button\r\n                        color='primary'\r\n                        type='button'\r\n                        onClick={props.onSaveBtnClicked}\r\n                        disabled={props.canSaveButton}>Upload</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default modal;","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) =>{\r\n    let labelElement = null;\r\n    let inputElement = null;\r\n    let styleLabel = 'styleLabel';\r\n    let styleLabelForCheckbox = 'checkBoxContainer';\r\n\r\n    if(props.req){\r\n        styleLabel += ' req';\r\n        styleLabelForCheckbox += ' req';\r\n    }\r\n\r\n    if(props.inputtype === 'input' && props.type === 'text'){\r\n        labelElement =  <label className={styleLabel} htmlFor={props.id}>{props.label}</label>;\r\n        inputElement = <input className='inputText' {...props}/>;\r\n    }\r\n\r\n    else if(props.inputtype === 'input' && props.type === 'password'){\r\n        labelElement =  <label className={styleLabel} htmlFor={props.id}>{props.label}</label>;\r\n        inputElement = <input className='inputText' {...props}/>;\r\n    }\r\n    else if(props.inputtype === 'textarea'){\r\n        labelElement =  <label className={styleLabel} htmlFor={props.id}>{props.label}</label>;\r\n        inputElement = <textarea className='inputText' {...props}/>;\r\n    }\r\n    else if(props.inputtype === 'input' && props.type === 'file'){\r\n        // labelElement =  <label htmlFor={props.id}>{props.label}</label>;\r\n        // inputElement = <input className='' {...props}/>\r\n        let fileLabelSpan = props.filelabelspan;\r\n        let fileLabel = props.filelabel;\r\n        let spanText = props.label;\r\n        if(props.filelabelspan){\r\n            spanText = null;\r\n            fileLabel = null;\r\n        }\r\n        else if(props.filelabel){\r\n            spanText = null;\r\n            fileLabelSpan = null;\r\n        }\r\n        inputElement = <div>\r\n                        <input {...props} className=\"inputfile\"\r\n                               data-multiple-caption=\"{count} files selected\"/>\r\n                        <label htmlFor={props.id}><span>{fileLabelSpan}{fileLabel}{spanText}</span></label>\r\n                    </div>\r\n    }\r\n    else if(props.inputtype === 'select'){\r\n        labelElement =  <label className={styleLabel} htmlFor={props.id}>{props.label}</label>;\r\n        inputElement = <select className='inputSelect' {...props}>\r\n            {props.options.map(option=>{\r\n                return <option key={option.value} value={option.value}>{option.displayValue}</option>;\r\n            })}\r\n        </select>\r\n    }\r\n    else if(props.inputtype === 'input' && props.type === 'radio'){\r\n        // inputElement = props.options.map(option=>{\r\n        //     return <label key={option.value} htmlFor={option.id}>\r\n        //             <input className='' {...props} value={option.value} id={option.id} name={props.name} checked={option.value === props.selected}/>{option.label}\r\n        //         </label>;\r\n        // })\r\n        inputElement = <div className='disp-flex'>\r\n                        {props.options.map(option=>{\r\n                            return <React.Fragment key={option.id}>\r\n                                <input {...props} type={props.type} className=\"buttonLikeRadio buttonLikeRadio-insurance_y_n\" id={option.id} name={props.name} value={option.value} checked={option.value === props.selected}/>\r\n                                <label className=\"round-border width100\" htmlFor={option.id}>{option.label}</label>\r\n                            </React.Fragment>\r\n                        })}\r\n                    </div>\r\n    }\r\n    else if(props.inputtype === 'input' && props.type === 'checkbox'){\r\n        // inputElement = <label>\r\n        //                 <input className='' {...props}/>{props.label}\r\n        //             </label>;\r\n        inputElement = <div>\r\n                        <label className={styleLabelForCheckbox} htmlFor={props.name}>{props.label}\r\n                        <input {...props} checked={!!props.ischecked}/>\r\n                                <span className=\"checkmark\"></span>\r\n                        </label>\r\n                    </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='Input'>\r\n            {labelElement}\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport produce from 'immer';\nimport * as firebase from 'firebase';\nimport axios from './axios';\nimport {database} from \"./firebase\";\n\nimport Navbar from './components/Navbar/Navbar';\nimport Button from './components/Button/Button';\nimport Modal from './components/Modal/Modal';\nimport Input from './components/Input/Input';\n\nclass App extends Component {\n\n    state = {\n        data: [\n            // {'fileName': 'file1', 'comment': 'comment1', 'id': 1},\n            // {'fileName': 'file2', 'comment': 'comment2', 'id': 2},\n            // {'fileName': 'file3', 'comment': 'comment3', 'id': 3},\n        ],\n        newFileName: '',\n        newComment: '',\n        currentId: '',\n        // fileUploadName: '',\n        showModal: false,\n        canSaveButton: false,\n        file_upload_name1: 'Click here',\n        file_upload_name2: 'Click here',\n    }\n\n    componentDidMount(){\n        console.log('component did mount');\n\n        // get data\n        axios.get('/.json')\n        .then(res=>{\n            console.log('load: ',res.data);\n\n            this.setState({\n                data: res.data.data,\n                dbLoaded: true,\n            });\n        })\n        .catch(err=>console.log(err));\n    }\n\n    updateDatabase = (data) =>{\n        console.log('updatemethod: ', this.state.data);\n        console.log('pass data:', data);\n\n        database.ref(\"-LYQMvCCcIhXxVdiPSvW\").set({\n            data: data,\n        });\n    }\n\n    uploadFileHandler = (ev) =>{\n        const newData = {\n            'fileName': this.state.file_upload_name1,\n            'comment': '',\n            'id': Math.floor(Math.random() * 100000000000000000) + 1,\n        }\n\n        // update immutably\n        const updatedData = produce(this.state.data, draft =>{\n            draft.push(newData);\n        });\n        \n        this.setState({\n            data: updatedData,\n            showModal: false,\n            file_upload_name1: 'Click here',\n            file_upload_name2: 'Click here',\n        });\n\n        // update db\n        this.updateDatabase(updatedData);\n\n    }\n\n    handleKeyPress = (ev) =>{\n        if(ev.key === 'Enter'){\n            this.uploadFileHandler();\n        }\n    }\n\n    closeModalHandler = () =>{\n        this.setState({ showModal: false});\n    }\n\n    sohwModalHandler = () =>{\n        this.setState({ showModal: true });\n    }\n\n    inputHandler = (ev) =>{\n        console.log('ev', ev.target.name);\n\n        if(ev.target.name === 'file_name'){\n            this.setState({\n                'newFileName': ev.target.value\n            });\n        }\n        else if(ev.target.name === 'comment'){\n            this.setState({\n                'newComment': ev.target.value\n            });\n        }\n        // else if(ev.target.name === 'file_upload_name'){\n        //     this.setState({\n        //         'fileUploadName' : ev.target.value\n        //     });\n        // }\n        else if(ev.target.type && ev.target.type === 'file'){\n            // display file name when file was selected\n            const label = ev.target.nextElementSibling;\n            const labelVal = label.innerHTML;\n\n            let fileName = '';\n            if(ev.target.files && ev.target.files.length > 1){\n                fileName = (ev.target.getAttribute('data-multiple.caption') || '').replace('{count}', ev.target.files.length);\n            }\n            else{\n                fileName = ev.target.value.split('\\\\').pop();\n            }\n\n            if(fileName){\n                const span = ev.target.name +1;\n                console.log('span state: ', span);\n                this.setState({ [span]: fileName });\n            }\n            else{\n                const label = ev.target.name +2;\n                this.setState({[label]:labelVal});\n            }\n        }\n\n    }\n\n    inputBlurHandler = (ev) =>{\n        console.log('blur', ev.target);\n\n        // get current id\n        const id = this.state.currentId;\n        console.log('id', id);\n\n        // find index\n        const dataIndex = this.state.data.findIndex(val =>{\n            return val.id === id;\n        });\n        console.log('index', dataIndex);\n\n        // update state immutably\n        if(ev.target.name === 'file_name'){            \n            const updatedData = produce(this.state.data, draft =>{\n                draft[dataIndex].fileName = this.state.newFileName;;\n            });\n\n            this.setState({data: updatedData});\n            // update db\n            this.updateDatabase(updatedData);\n            \n        }\n        else if(ev.target.name === 'comment'){\n            const updatedData = produce(this.state.data, draft =>{\n\n                draft[dataIndex].comment = this.state.newComment;\n            });\n\n            this.setState({data: updatedData});\n            // update db\n            this.updateDatabase(updatedData);\n\n        }\n\n    }\n\n    fileNameClickedHandler = (id) =>{\n        console.log('id', id);\n\n        // find index of data\n        const dataIndex = this.state.data.findIndex(val=>{\n            return val.id === id;\n        });\n\n        this.setState({\n            'newFileName': this.state.data[dataIndex].fileName,\n            'newComment': this.state.data[dataIndex].comment,\n            'currentId': id\n        });\n    }\n\n    render(){\n        console.log('=======================', this.state);\n\n        let files = null;\n        let commentHtml = null;\n\n        // check if db finish loading\n        if(this.state.dbLoaded){\n            // render files\n            if(this.state.data.length){\n                files = this.state.data.map((val)=>{\n                    return <div onClick={this.fileNameClickedHandler.bind(this, val.id)} className='file-list-item' key={val.id} dataid={val.id}>{val.fileName}</div>;\n                });\n            }\n            else{\n                files =  <p>There are no files to display</p>;\n            }\n\n            // render comment area\n            if (this.state.currentId){\n                commentHtml =  <div>\n                    <Input\n                        inputtype='input'\n                        type='text'\n                        label='File Name'\n                        value={this.state.newFileName}\n                        name='file_name'\n                        id='file_name'\n                        onChange={this.inputHandler}\n                        onBlur={this.inputBlurHandler}/>\n\n                    <Input\n                        inputtype='textarea'\n                        name='comment'\n                        id='comment'\n                        rows='5'\n                        value={this.state.newComment}\n                        onChange={this.inputHandler}\n                        onBlur={this.inputBlurHandler}\n                        label='Comment'/>\n                </div>;\n                \n            }\n            else{\n                commentHtml = <p>No Files Selected</p>\n            }\n        }\n        \n       \n\n        return (\n            <div className=\"App\">\n                <Navbar>\n                    <div className=\"leftContainer\">\n                        <Button\n                            color='primary'\n                            onClick={this.sohwModalHandler}>Add</Button>\n                    </div>\n                </Navbar>\n\n                <div style={{padding: 20+'px'}}></div>\n\n                <section className=\"mainContainer\">\n                    <div className='disp-flex align-items-flex-start'>\n                        <div className='flex-25 listFileContainer'>\n                            {files}\n                        </div>\n                        <div className=\"flex-75 textInputContainer\">\n                            {commentHtml}\n                        </div>\n                    </div>\n                </section>\n\n                <Modal\n                    title='Upload a File'\n                    onSaveBtnClicked={this.uploadFileHandler}\n                    onCloseBtnClicked={this.closeModalHandler}\n                    showModal={this.state.showModal}>\n                        <div className='modalContent'>\n                            {/* <Input\n                                inputtype='input'\n                                type='text'\n                                label='Name of File'\n                                name='file_upload_name'\n                                id='file_upload_name'\n                                onChange={this.inputHandler}\n                                onKeyPress={this.handleKeyPress}/> */}\n\n                            <Input\n                             inputtype='input'\n                             type='file'\n                             name='file_upload_name'\n                             id='file_upload_name'\n                             onChange={this.inputHandler}\n                             filelabelspan={this.state.file_upload_name1}\n                             filelabel={this.state.file_upload_name2}/>\n                        </div>\n                    </Modal>\n              \n                \n\n            </div>\n          );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}